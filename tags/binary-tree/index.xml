<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Binary Tree on fgg blog</title><link>/tags/binary-tree/</link><description>fgg blog (Binary Tree)</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>1522009317@qq.com
(fmh)</managingEditor><lastBuildDate>Wed, 16 Oct 2024 21:09:15 +0800</lastBuildDate><atom:link href="/tags/binary-tree/index.xml" rel="self" type="application/rss+xml"/><item><title>构建二叉树</title><link>/posts/historicalsnippet/2024-10-16-%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Wed, 16 Oct 2024 21:09:15 +0800</pubDate><author>1522009317@qq.com (fmh)</author><guid>/posts/historicalsnippet/2024-10-16-%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>&lt;h2 id="刷题和刷题的副作用" >
&lt;div>
&lt;a href="#%e5%88%b7%e9%a2%98%e5%92%8c%e5%88%b7%e9%a2%98%e7%9a%84%e5%89%af%e4%bd%9c%e7%94%a8">
#
&lt;/a>
刷题和刷题的副作用
&lt;/div>
&lt;/h2>
&lt;p>我在刷题的时候，很搞笑，是先接触到对二叉树进行各种骚操作。意思是说，牛客或者力扣这些平台
已经默认给你的就是一棵二叉树，你只需要完成诸如前中后序各种遍历二叉树节点的算法。如果你对
这些概念感到陌生，没关系，成年人游戏喜欢吗？&lt;/p>
&lt;p>可以想象成类似这样的成人游戏：顺着数数数到百，没有多少挑战，对吧？逆着数，
也没劲对吧？那就每十一个为组轮番顺序逆序数（要求在100妙内完成）&amp;hellip;诸如此类。&lt;/p>
&lt;p>问题是，如果你要在自己本地机器运行测试用例，那么，得先自己把二叉树给构建出来。为什么不老
老实实在平台刷题就得了？！因为我也想要更多&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，我要把这些在刷题时显得鸡零狗碎的内容给组
织起来，当然大概只是为了自己开心。然后随便水博客:)
不得不说，虽然我是抱着刷题应试的极其功利的初心，也架不住有些内容确实很令人感兴趣。我把这
个称为刷题的副作用。&lt;/p>
&lt;h2 id="茴香豆和二叉树" >
&lt;div>
&lt;a href="#%e8%8c%b4%e9%a6%99%e8%b1%86%e5%92%8c%e4%ba%8c%e5%8f%89%e6%a0%91">
#
&lt;/a>
茴香豆和二叉树
&lt;/div>
&lt;/h2>
&lt;p>茴香豆味道如何不得而知，但我貌似记得孔老哥说茴字有四种写法&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>关于构建二叉树，反正我就知道有四种，分别是：&lt;/p>
&lt;ul>
&lt;li>给定一个数组，从这个数组构建一棵二叉树（默认大约就是完全二叉树）：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># Definition for a binary tree node.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">class&lt;/span> &lt;span style="color:#f3f99d">TreeNode&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">def&lt;/span> __init__(self, val&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#ff9f43">0&lt;/span>, left&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#ff6ac1">None&lt;/span>, right&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#ff6ac1">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#ff6ac1">.&lt;/span>val &lt;span style="color:#ff6ac1">=&lt;/span> val
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#ff6ac1">.&lt;/span>left &lt;span style="color:#ff6ac1">=&lt;/span> left
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#ff6ac1">.&lt;/span>right &lt;span style="color:#ff6ac1">=&lt;/span> right
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">build_tree&lt;/span>(nodes, index&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#ff9f43">0&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> index &lt;span style="color:#ff6ac1">&amp;gt;=&lt;/span> &lt;span style="color:#ff5c57">len&lt;/span>(nodes) &lt;span style="color:#ff6ac1">or&lt;/span> nodes[index] &lt;span style="color:#ff6ac1">is&lt;/span> &lt;span style="color:#ff6ac1">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff6ac1">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root &lt;span style="color:#ff6ac1">=&lt;/span> TreeNode(nodes[index])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root&lt;span style="color:#ff6ac1">.&lt;/span>left &lt;span style="color:#ff6ac1">=&lt;/span> build_tree(nodes, &lt;span style="color:#ff9f43">2&lt;/span> &lt;span style="color:#ff6ac1">*&lt;/span> index &lt;span style="color:#ff6ac1">+&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root&lt;span style="color:#ff6ac1">.&lt;/span>right &lt;span style="color:#ff6ac1">=&lt;/span> build_tree(nodes, &lt;span style="color:#ff9f43">2&lt;/span> &lt;span style="color:#ff6ac1">*&lt;/span> index &lt;span style="color:#ff6ac1">+&lt;/span> &lt;span style="color:#ff9f43">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>给定两个数组，一个是前序遍历数组，另一个是中序遍历数组，构建二叉树：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 可以通过以下步骤构建二叉树：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 找到根节点：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 在前序遍历中，第一个元素是根节点。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 然后在中序遍历中找到该根节点的位置，&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 根据这个位置可以将中序遍历数组分为左右子树的部分：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 根节点左边的部分是左子树。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 根节点右边的部分是右子树。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 递归构建左右子树：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 在中序遍历的左子树部分和右子树部分中，继续构建左右子树。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 使用前序遍历的第二个元素（第一个是当前的根）作为新的根节点继续递归。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 终止条件：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 当中序遍历或前序遍历数组为空时，返回 None，表示当前节点没有子节点。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">build_tree&lt;/span>(self, preorder, inorder):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 递归终止条件：没有节点了&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> &lt;span style="color:#ff6ac1">not&lt;/span> preorder &lt;span style="color:#ff6ac1">or&lt;/span> &lt;span style="color:#ff6ac1">not&lt;/span> inorder:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff6ac1">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 前序遍历：根-左-右&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 前序数组的第一个元素就是根节点&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root_val &lt;span style="color:#ff6ac1">=&lt;/span> preorder[&lt;span style="color:#ff9f43">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root &lt;span style="color:#ff6ac1">=&lt;/span> TreeNode(root_val)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 中序遍历：左-根-右&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 在中序数组中找根节点的位置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inorder_index &lt;span style="color:#ff6ac1">=&lt;/span> inorder&lt;span style="color:#ff6ac1">.&lt;/span>index(root_val)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 构建左右子树&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root&lt;span style="color:#ff6ac1">.&lt;/span>left &lt;span style="color:#ff6ac1">=&lt;/span> self&lt;span style="color:#ff6ac1">.&lt;/span>build_tree(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> preorder[&lt;span style="color:#ff9f43">1&lt;/span> : inorder_index &lt;span style="color:#ff6ac1">+&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>], inorder[:inorder_index]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root&lt;span style="color:#ff6ac1">.&lt;/span>right &lt;span style="color:#ff6ac1">=&lt;/span> self&lt;span style="color:#ff6ac1">.&lt;/span>build_tree(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> preorder[inorder_index &lt;span style="color:#ff6ac1">+&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span> :], inorder[inorder_index &lt;span style="color:#ff6ac1">+&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span> :]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>给定两个数组，一个是中序遍历数组，另一个是后序遍历数组，构建二叉树：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 可以通过以下步骤构建二叉树：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 找到根节点：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 在后序遍历中，最后一个元素是根节点。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 然后在中序遍历中找到该根节点的位置，&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 根据这个位置可以将中序遍历数组分为左右子树的部分：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 根节点左边的部分是左子树。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 根节点右边的部分是右子树。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 递归构建左右子树：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 在中序遍历的左子树部分和右子树部分中，继续构建左右子树。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 使用后序遍历的倒数第二个元素（倒数第一个是当前的根）作为新的根节点继续递归。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 终止条件：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 当中序遍历或后序遍历数组为空时，返回 None，表示当前节点没有子节点。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">build_tree&lt;/span>(self, inorder, postorder):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> &lt;span style="color:#ff6ac1">not&lt;/span> inorder &lt;span style="color:#ff6ac1">or&lt;/span> &lt;span style="color:#ff6ac1">not&lt;/span> postorder:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff6ac1">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 后序遍历：左-右-根&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># （递归）传入函数的后序数组的倒数第一个元素就是根节点&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root_val &lt;span style="color:#ff6ac1">=&lt;/span> postorder[&lt;span style="color:#ff6ac1">-&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root &lt;span style="color:#ff6ac1">=&lt;/span> TreeNode(root_val)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 中序遍历：左-根-右&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 在中序数组中找根节点的位置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inorder_index &lt;span style="color:#ff6ac1">=&lt;/span> inorder&lt;span style="color:#ff6ac1">.&lt;/span>index(root_val)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 构建左右子树&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root&lt;span style="color:#ff6ac1">.&lt;/span>left &lt;span style="color:#ff6ac1">=&lt;/span> self&lt;span style="color:#ff6ac1">.&lt;/span>build_tree(inorder[:inorder_index], postorder[:inorder_index])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root&lt;span style="color:#ff6ac1">.&lt;/span>right &lt;span style="color:#ff6ac1">=&lt;/span> self&lt;span style="color:#ff6ac1">.&lt;/span>build_tree(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inorder[inorder_index &lt;span style="color:#ff6ac1">+&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span> :], postorder[inorder_index:&lt;span style="color:#ff6ac1">-&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>给定两个数组，一个是前序遍历数组，另一个是后序遍历数组，构建二叉树：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 构建的过程比较复杂，因为前序遍历和后序遍历不能直接区分左右子树的边界。具体思路如下：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 根节点：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 前序遍历的第一个元素是根节点，后序遍历的最后一个元素是根节点。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 左子树的根节点：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 前序遍历的第二个元素是左子树的根节点。根据这个节点在后序遍历中的位置，我们可以知&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 道左子树的大小，进而划分出前序遍历和后序遍历中的左右子树部分。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 递归构建左右子树：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 确定了左子树的范围后，递归构建左右子树，直到数组为空时，返回 None 表示没有子节点。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">build_tree&lt;/span>(self, preorder, postorder):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 如果前序遍历为空，返回None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> &lt;span style="color:#ff6ac1">not&lt;/span> preorder &lt;span style="color:#ff6ac1">or&lt;/span> &lt;span style="color:#ff6ac1">not&lt;/span> postorder:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> &lt;span style="color:#ff6ac1">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 前序遍历的第一个节点是根节点&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root &lt;span style="color:#ff6ac1">=&lt;/span> TreeNode(preorder[&lt;span style="color:#ff9f43">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 如果只有一个节点，直接返回根节点&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> &lt;span style="color:#ff5c57">len&lt;/span>(preorder) &lt;span style="color:#ff6ac1">==&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 前序遍历的第二个节点是左子树的根节点，找到它在后序遍历中的位置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left_root_val &lt;span style="color:#ff6ac1">=&lt;/span> preorder[&lt;span style="color:#ff9f43">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left_subtree_size &lt;span style="color:#ff6ac1">=&lt;/span> postorder&lt;span style="color:#ff6ac1">.&lt;/span>index(left_root_val) &lt;span style="color:#ff6ac1">+&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 递归构建左子树和右子树&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root&lt;span style="color:#ff6ac1">.&lt;/span>left &lt;span style="color:#ff6ac1">=&lt;/span> self&lt;span style="color:#ff6ac1">.&lt;/span>build_tree(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> preorder[&lt;span style="color:#ff9f43">1&lt;/span> : &lt;span style="color:#ff9f43">1&lt;/span> &lt;span style="color:#ff6ac1">+&lt;/span> left_subtree_size], postorder[:left_subtree_size]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root&lt;span style="color:#ff6ac1">.&lt;/span>right &lt;span style="color:#ff6ac1">=&lt;/span> self&lt;span style="color:#ff6ac1">.&lt;/span>build_tree(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> preorder[&lt;span style="color:#ff9f43">1&lt;/span> &lt;span style="color:#ff6ac1">+&lt;/span> left_subtree_size :], postorder[left_subtree_size:&lt;span style="color:#ff6ac1">-&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="前中后序遍历算法大放送" >
&lt;div>
&lt;a href="#%e5%89%8d%e4%b8%ad%e5%90%8e%e5%ba%8f%e9%81%8d%e5%8e%86%e7%ae%97%e6%b3%95%e5%a4%a7%e6%94%be%e9%80%81">
#
&lt;/a>
前中后序遍历算法大放送
&lt;/div>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 前序遍历：根 -&amp;gt; 左 -&amp;gt; 右&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">preorder_traversal&lt;/span>(root):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> root &lt;span style="color:#ff6ac1">is&lt;/span> &lt;span style="color:#ff6ac1">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> [root&lt;span style="color:#ff6ac1">.&lt;/span>val] &lt;span style="color:#ff6ac1">+&lt;/span> preorder_traversal(root&lt;span style="color:#ff6ac1">.&lt;/span>left) &lt;span style="color:#ff6ac1">+&lt;/span> preorder_traversal(root&lt;span style="color:#ff6ac1">.&lt;/span>right)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 中序遍历：左 -&amp;gt; 根 -&amp;gt; 右&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">inorder_traversal&lt;/span>(root):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> root &lt;span style="color:#ff6ac1">is&lt;/span> &lt;span style="color:#ff6ac1">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> inorder_traversal(root&lt;span style="color:#ff6ac1">.&lt;/span>left) &lt;span style="color:#ff6ac1">+&lt;/span> [root&lt;span style="color:#ff6ac1">.&lt;/span>val] &lt;span style="color:#ff6ac1">+&lt;/span> inorder_traversal(root&lt;span style="color:#ff6ac1">.&lt;/span>right)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 后序遍历：左 -&amp;gt; 右 -&amp;gt; 根&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">postorder_traversal&lt;/span>(root):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> root &lt;span style="color:#ff6ac1">is&lt;/span> &lt;span style="color:#ff6ac1">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> postorder_traversal(root&lt;span style="color:#ff6ac1">.&lt;/span>left) &lt;span style="color:#ff6ac1">+&lt;/span> postorder_traversal(root&lt;span style="color:#ff6ac1">.&lt;/span>right) &lt;span style="color:#ff6ac1">+&lt;/span> [root&lt;span style="color:#ff6ac1">.&lt;/span>val]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然也不能把层序遍历给落下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 层序遍历“标准”做法（带for循环）：处理逻辑更清晰&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">level_order_bfs&lt;/span>(root, prt_none&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#ff6ac1">False&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> root &lt;span style="color:#ff6ac1">is&lt;/span> &lt;span style="color:#ff6ac1">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#ff6ac1">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue &lt;span style="color:#ff6ac1">=&lt;/span> deque([root])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">while&lt;/span> queue:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level_sz &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff5c57">len&lt;/span>(queue) &lt;span style="color:#78787e"># 当前层的节点数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level_nodes &lt;span style="color:#ff6ac1">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">for&lt;/span> _ &lt;span style="color:#ff6ac1">in&lt;/span> &lt;span style="color:#ff5c57">range&lt;/span>(level_sz): &lt;span style="color:#78787e"># 遍历当前层所有节点&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node &lt;span style="color:#ff6ac1">=&lt;/span> queue&lt;span style="color:#ff6ac1">.&lt;/span>popleft()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> node &lt;span style="color:#ff6ac1">is&lt;/span> &lt;span style="color:#ff6ac1">not&lt;/span> &lt;span style="color:#ff6ac1">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level_nodes&lt;span style="color:#ff6ac1">.&lt;/span>append(node&lt;span style="color:#ff6ac1">.&lt;/span>val)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#ff6ac1">.&lt;/span>append(node&lt;span style="color:#ff6ac1">.&lt;/span>left)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#ff6ac1">.&lt;/span>append(node&lt;span style="color:#ff6ac1">.&lt;/span>right)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> prt_none:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level_nodes&lt;span style="color:#ff6ac1">.&lt;/span>append(&lt;span style="color:#ff6ac1">None&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#ff6ac1">.&lt;/span>extend(level_nodes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> prt_none:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># 清理结果列表末尾多余的 None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">while&lt;/span> result &lt;span style="color:#ff6ac1">and&lt;/span> result[&lt;span style="color:#ff6ac1">-&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>] &lt;span style="color:#ff6ac1">is&lt;/span> &lt;span style="color:#ff6ac1">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#ff6ac1">.&lt;/span>pop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> result
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不知道你对这些算法感觉如何，我反正是觉得挺有意思。但关于前文“成人游戏”的噱头，我想表示抱
歉，因为通常大家多少是期待那是好玩的游戏，没想到裤子都脱了，你就给我整数数游戏。别急，关
于这种翻来覆去地搞类似事情的游戏，王二后来被人逮住关起来写的交代材料就比较有趣&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>，你可
以自己看去。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>《雾都孤儿》里还在孤儿院混的奥利弗抽签很倒霉，抽到他去做出头鸟，他吃完米粒稀少得可
以一只手数完的那碗粥后硬着头皮去讨第二碗时就是这么说的：Please, Sir, I want some more.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>《孔乙己》里到处被嫌弃但仍然讨馋嘴小孩喜欢的孔老哥说的。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>《黄金时代》里王二写他和陈清扬搞破鞋往事的交代材料。&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>