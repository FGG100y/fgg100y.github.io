<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GIL on fgg blog</title><link>/tags/gil/</link><description>fgg blog (GIL)</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>1522009317@qq.com
(fmh)</managingEditor><lastBuildDate>Fri, 18 Oct 2024 16:37:57 +0800</lastBuildDate><atom:link href="/tags/gil/index.xml" rel="self" type="application/rss+xml"/><item><title>起于快排终于全局解释器锁</title><link>/posts/personals/momentsoflife/2024-10-18-%E8%B5%B7%E4%BA%8E%E5%BF%AB%E6%8E%92%E7%BB%88%E4%BA%8E%E5%85%A8%E5%B1%80%E8%A7%A3%E9%87%8A%E5%99%A8%E9%94%81/</link><pubDate>Fri, 18 Oct 2024 16:37:57 +0800</pubDate><author>1522009317@qq.com (fmh)</author><guid>/posts/personals/momentsoflife/2024-10-18-%E8%B5%B7%E4%BA%8E%E5%BF%AB%E6%8E%92%E7%BB%88%E4%BA%8E%E5%85%A8%E5%B1%80%E8%A7%A3%E9%87%8A%E5%99%A8%E9%94%81/</guid><description>&lt;h2 id="快速排序算法quick-sort" >
&lt;div>
&lt;a href="#%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95quick-sort">
#
&lt;/a>
快速排序算法（quick sort）
&lt;/div>
&lt;/h2>
&lt;p>下文简称“快排”。&lt;/p>
&lt;p>快排算法的实现，在Python中有偷懒的做法，就是不对传入数组进行原地分区，&lt;code>show me the code&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 快排实现之邀请面试官拷打版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">quick_sort&lt;/span>(arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> &lt;span style="color:#ff5c57">len&lt;/span>(arr) &lt;span style="color:#ff6ac1">&amp;lt;=&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> arr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pivot &lt;span style="color:#ff6ac1">=&lt;/span> arr[&lt;span style="color:#ff6ac1">-&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> less &lt;span style="color:#ff6ac1">=&lt;/span> [x &lt;span style="color:#ff6ac1">for&lt;/span> x &lt;span style="color:#ff6ac1">in&lt;/span> arr[:&lt;span style="color:#ff6ac1">-&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>] &lt;span style="color:#ff6ac1">if&lt;/span> x &lt;span style="color:#ff6ac1">&amp;lt;=&lt;/span> pivot]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> greater &lt;span style="color:#ff6ac1">=&lt;/span> [x &lt;span style="color:#ff6ac1">for&lt;/span> x &lt;span style="color:#ff6ac1">in&lt;/span> arr[:&lt;span style="color:#ff6ac1">-&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>] &lt;span style="color:#ff6ac1">if&lt;/span> x &lt;span style="color:#ff6ac1">&amp;gt;&lt;/span> pivot]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> quick_sort(less) &lt;span style="color:#ff6ac1">+&lt;/span> [pivot] &lt;span style="color:#ff6ac1">+&lt;/span> quick_sort(greater)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Ier：您这个实现看起来挺简洁嘛，说说看这么做有什么不足的地方？最差情况是什么？
Iee：嗯，您是指，啊，对了，嗯（笑容逐渐凝固.gif，磨磨叽叽假装思考...）
Ier: 我是指您代码里使用了额外的存储空间，`less` 和 `greater`，可以不用它们吗？
Iee：哦，您是指要对数组进行原地分区吗？（那些追求速度和基情的编程语言通常都是原地操作：应该是问这个吧？）
Ier: 对。
Iee：（心里嘀咕，就是怕那个 `partition()` 函数，怕啥来啥是吧:(，墨菲）
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">quick_sort&lt;/span>(arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> &lt;span style="color:#ff5c57">len&lt;/span>(arr) &lt;span style="color:#ff6ac1">&amp;lt;=&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> arr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> low, high &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>, &lt;span style="color:#ff5c57">len&lt;/span>(arr)&lt;span style="color:#ff6ac1">-&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> quick_sort_inplace(arr, low, high)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">quick_sort_inplace&lt;/span>(arr, low, high):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> low &lt;span style="color:#ff6ac1">&amp;lt;&lt;/span> high:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pivot_idx &lt;span style="color:#ff6ac1">=&lt;/span> partition(arr, low, high)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> quick_sort_inplace(arr, low, pivot_idx&lt;span style="color:#ff6ac1">-&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> quick_sort_inplace(arr, pivot_idx&lt;span style="color:#ff6ac1">+&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>, high)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">partition&lt;/span>(arr, low, high):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pivot &lt;span style="color:#ff6ac1">=&lt;/span> arr[high]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#ff6ac1">=&lt;/span> low &lt;span style="color:#ff6ac1">-&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">for&lt;/span> j &lt;span style="color:#ff6ac1">in&lt;/span> &lt;span style="color:#ff5c57">range&lt;/span>(low, high):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span> arr[j] &lt;span style="color:#ff6ac1">&amp;lt;&lt;/span> pivot:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#ff6ac1">+=&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr[i], arr[j] &lt;span style="color:#ff6ac1">=&lt;/span> arr[j], arr[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr[i&lt;span style="color:#ff6ac1">+&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>], arr[high] &lt;span style="color:#ff6ac1">=&lt;/span> arr[high], arr[i &lt;span style="color:#ff6ac1">+&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> i&lt;span style="color:#ff6ac1">+&lt;/span>&lt;span style="color:#ff9f43">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>Ier: 嗯，好。您的pivot是怎么选择的啊？
Iee：我是选了数组的最后一个元素。
Ier：嗯，那我有个问题请教一下，如果最后一个元素恰好是最大值或最小值的话，会怎么样？
Iee：（是啊，我也不太理解为什么这么草率地用最后一个元素呢？）嗯，啊，这个，应该是会导致分区效果不好吧。
Ier: 那还可以优化吗？
Iee：随机选择一个元素作为pivot？
&lt;/code>&lt;/pre>
&lt;p>好，要的就是这个“随机选择“。（顺便结束面试拷打模拟：)&lt;/p>
&lt;p>我想你可能已经知道在快排里怎么引入随机pivot（不用怀疑，就是调用&lt;code>random.choice()&lt;/code>）或选择
实现更好的pivot策略，比如三数取中法&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>（其实我是在看洗牌算法的时候看到&lt;code>random.randint()&lt;/code>这个函数突然想起的快速排序算法里未完成
的故事，不过这个无关紧要，接着看看random这个令人好奇的玩具：）&lt;/p>
&lt;h2 id="伪随机数生成器-pseudo-random-number-generator-prnghttpsenwikipediaorgwikipseudorandom_number_generator" >
&lt;div>
&lt;a href="#%e4%bc%aa%e9%9a%8f%e6%9c%ba%e6%95%b0%e7%94%9f%e6%88%90%e5%99%a8-pseudo-random-number-generator-prnghttpsenwikipediaorgwikipseudorandom_number_generator">
#
&lt;/a>
伪随机数生成器 &lt;a href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator">pseudo random number generator， PRNG&lt;/a>
&lt;/div>
&lt;/h2>
&lt;blockquote>
&lt;p>1946年, 冯.诺依曼首次给出了使用计算机程序产生随机数的方法, 但事实证明这种方法产生的数也
并非是随机的.一个普遍的观点是, 绝对随机的随机数只是一种理想的随机数, 计算机不会产生绝对
随机的随机数,它只能生成相对随机的随机数, 即伪随机数. 因此, 伪随机数并不是假随机数, 这里
的“伪”是有规律的意思, 就是产生的伪随机数既是随机的又是有规律的.
这样产生的数列虽然不是由真实的随机现象产生的, &amp;gt;但具有类似于随机数的统计性质, 可以作为随
机数来使用.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>0-1均匀分布的伪随机数是最基本也是最简单的伪随机数, 它是生成一切其他分布的伪随机数的基础&lt;/p>
&lt;/blockquote>
&lt;p>好在统计学是学过一些皮毛的，这里说的随机数在DS哥们看来就是指从均匀分布生成样本（当然也可
以从其他随机分布获取）。这里有更详细的解释和内容：&lt;a href="https://www.wict.pku.edu.cn/zlian/docs/20181023154331943266.pdf">伪随机数与蒙特卡罗方法&lt;/a>&lt;/p>
&lt;p>但是大家知道，CS哥们从来都不是单单说出来，还要写出来。实际上用的随机数大多是随机数生成器
生的，又因为可以通过设定种子来使得每次都生成一样的随机数序列，因此又被蔑称为“伪随机数”。
而如果想知道具体代码实现中是怎么一回事，还得去源码丛林探险一番才行。&lt;/p>
&lt;p>如果你的IDE不是很差，应该有功能支持直接跳转到&lt;code>randint()&lt;/code>这个函数的实现代码处，然后一睹芳
容。我反正是看到了，但看不懂。有意思的是在浏览过程，看到了大佬的留言：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span># Translated by Guido van Rossum from C source provided by
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># Adrian Baddeley. Adapted by Raymond Hettinger for use with
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># the Mersenne Twister and os.urandom() core generators.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以及doc-string里的：（对的，如果你也到了这个地方，你就不会惊讶，我是倒着往回读的）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>* It is one of the most extensively tested generators in existence.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* The random() method is implemented in C, executes in a single Python step,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> and is, therefore, threadsafe.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这两段话其实信息量挺大（对我来说，巨大），比如&lt;code>random()&lt;/code>由大佬翻译自另一大佬的C源码云云，
比如 &lt;code>Mersenne Twister&lt;/code>（梅森旋转算法，用于提高随机数生成器性能），随便哪一个都足够喝上
一壶的了。&lt;/p>
&lt;p>然后就被“threadsafe&amp;quot;击中，一来这个概念在我确实是一知半解，二来关于线程的问题确实被面试官
问过，三来相比其他概念，这个可能更接近我能够实际接触的概念范围。所以，这时我已经无暇顾及
random到底如何伪random起来了（内容太多时间太紧不能DFS&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>这些东西），而是想知道什么是线
程安全，它跟所谓的GIL有什么关系。&lt;/p>
&lt;h2 id="线程安全thread-safty与全局解释器锁gil" >
&lt;div>
&lt;a href="#%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8thread-safty%e4%b8%8e%e5%85%a8%e5%b1%80%e8%a7%a3%e9%87%8a%e5%99%a8%e9%94%81gil">
#
&lt;/a>
线程安全（thread-safty）与全局解释器锁（GIL）
&lt;/div>
&lt;/h2>
&lt;h3 id="线程安全" >
&lt;div>
&lt;a href="#%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8">
##
&lt;/a>
线程安全
&lt;/div>
&lt;/h3>
&lt;p>线程安全（thread-safety）是指在多线程环境中，某段代码能够被多个线程安全地访问和修改，而
不会引发数据竞争或不可预期的结果。如果代码不是线程安全的，在多个线程同时执行时可能会出现
问题，如数据不一致或程序崩溃。&lt;/p>
&lt;p>线程安全的含义在这里可以理解为：即使多个线程同时调用 random() 函数，也不会引起冲突或者产
生错误结果。&lt;/p>
&lt;blockquote>
&lt;p>The random() method is implemented in C, executes in a single Python step, and is,
therefore, threadsafe.&lt;/p>
&lt;/blockquote>
&lt;p>这段话可以分成几个部分来理解：&lt;/p>
&lt;p>Implemented in C：
random() 函数的具体实现是在 Python 的 C 库中编写的，而不是直接用 Python 实现的。
这通常可以提高性能，因为 C 语言比 Python 更高效。&lt;/p>
&lt;p>Executes in a single Python step：
random() 方法在 Python 中是一个不可分割的单步操作。这意味着当你调用 random() 时，
整个生成随机数的过程是一个原子操作。即使有多个线程同时调用 random()，它们彼此之
间不会影响，因为它们每次都执行完全独立的一步。&lt;/p>
&lt;p>Threadsafe：
由于 random() 的实现是原子的，意味着它在多线程环境下也是安全的。即使多个线程在同
一时间调用 random() 函数，它们不会互相干扰。每个线程调用 random() 时，都会生成一
个独立的随机数，而不会因为并发问题产生冲突。&lt;/p>
&lt;h3 id="非线程安全的情形" >
&lt;div>
&lt;a href="#%e9%9d%9e%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e7%9a%84%e6%83%85%e5%bd%a2">
##
&lt;/a>
非线程安全的情形
&lt;/div>
&lt;/h3>
&lt;p>如果某个函数不是线程安全的，你可能需要手动加锁或同步线程，确保同时只有一个线程在执行该函
数。比如，对于一些状态共享的函数或对象（如累加器），需要用线程锁来确保不会产生竞态条件。&lt;/p>
&lt;p>手动加锁？&lt;/p>
&lt;p>手动加锁（manual locking）是指在多线程编程中，开发者通过显式加锁来控制线程访问共享资源的
过程，确保同一时间只有一个线程能访问该资源。这种机制主要用于解决竞态条件（race condition）
的问题。&lt;/p>
&lt;p>为什么需要加锁？
当多个线程同时访问共享数据时，可能会出现线程间的竞争。如果一个线程正在修改共享数据，另一
个线程同时访问它，可能会导致不一致或不可预测的行为。加锁可以确保同一时间只有一个线程可以
访问或修改共享资源，从而避免并发问题。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">import&lt;/span> threading
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lock &lt;span style="color:#ff6ac1">=&lt;/span> threading&lt;span style="color:#ff6ac1">.&lt;/span>Lock() &lt;span style="color:#78787e"># 创建一个锁对象&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>counter &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">increment&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">global&lt;/span> counter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">for&lt;/span> _ &lt;span style="color:#ff6ac1">in&lt;/span> &lt;span style="color:#ff5c57">range&lt;/span>(&lt;span style="color:#ff9f43">100000&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">with&lt;/span> lock: &lt;span style="color:#78787e"># 加锁，确保同一时间只有一个线程修改 counter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter &lt;span style="color:#ff6ac1">+=&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 创建两个线程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t1 &lt;span style="color:#ff6ac1">=&lt;/span> threading&lt;span style="color:#ff6ac1">.&lt;/span>Thread(target&lt;span style="color:#ff6ac1">=&lt;/span>increment)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t2 &lt;span style="color:#ff6ac1">=&lt;/span> threading&lt;span style="color:#ff6ac1">.&lt;/span>Thread(target&lt;span style="color:#ff6ac1">=&lt;/span>increment)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 启动线程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t1&lt;span style="color:#ff6ac1">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t2&lt;span style="color:#ff6ac1">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 等待线程执行完毕&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t1&lt;span style="color:#ff6ac1">.&lt;/span>join()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t2&lt;span style="color:#ff6ac1">.&lt;/span>join()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">print&lt;/span>(&lt;span style="color:#5af78e">f&lt;/span>&lt;span style="color:#5af78e">&amp;#34;Final counter value: &lt;/span>&lt;span style="color:#5af78e">{&lt;/span>counter&lt;span style="color:#5af78e">}&lt;/span>&lt;span style="color:#5af78e">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="全局解释器锁-gil" >
&lt;div>
&lt;a href="#%e5%85%a8%e5%b1%80%e8%a7%a3%e9%87%8a%e5%99%a8%e9%94%81-gil">
##
&lt;/a>
全局解释器锁 (GIL)
&lt;/div>
&lt;/h3>
&lt;p>GIL（Global Interpreter Lock） 是 Python 解释器中的一个全局锁，存在于CPython实现中。它的
主要作用是确保在同一时刻只有一个线程可以执行 Python 字节码，避免多线程间对 Python 内部对
象的竞争访问。GIL 的作用:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>保证线程安全：GIL 主要用于保护 Python 解释器中的内部数据结构，防止多个线程同时执行时，
出现数据竞争或不可预测的行为。GIL 通过限制同一时间只有一个线程执行，来确保这些数据结构
的线程安全。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Python 对象的引用计数：Python 使用引用计数来管理内存，而引用计数的修改并不是线程安全的。
GIL 确保引用计数在多线程环境下不会出错。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>老生长谈&lt;/strong>：虽然 Python 允许使用多线程，但由于 GIL 的存在，在CPU 密集型任务（如大量数
值计算）中，GIL 会成为性能瓶颈，因为无论有多少个线程同时执行，CPU 也只能真正地处理一个线
程。GIL 会在多个线程之间不断切换，导致无法真正利用多核 CPU 的性能。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">import&lt;/span> threading
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">cpu_bound_task&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">for&lt;/span> _ &lt;span style="color:#ff6ac1">in&lt;/span> &lt;span style="color:#ff5c57">range&lt;/span>(&lt;span style="color:#ff9f43">10000000&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#ff6ac1">+=&lt;/span> &lt;span style="color:#ff9f43">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e"># 创建多个线程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>threads &lt;span style="color:#ff6ac1">=&lt;/span> [threading&lt;span style="color:#ff6ac1">.&lt;/span>Thread(target&lt;span style="color:#ff6ac1">=&lt;/span>cpu_bound_task) &lt;span style="color:#ff6ac1">for&lt;/span> _ &lt;span style="color:#ff6ac1">in&lt;/span> &lt;span style="color:#ff5c57">range&lt;/span>(&lt;span style="color:#ff9f43">4&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">for&lt;/span> t &lt;span style="color:#ff6ac1">in&lt;/span> threads:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t&lt;span style="color:#ff6ac1">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">for&lt;/span> t &lt;span style="color:#ff6ac1">in&lt;/span> threads:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t&lt;span style="color:#ff6ac1">.&lt;/span>join()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>即使创建了多个线程，这个任务由于是CPU 密集型任务，GIL 会导致在单核 CPU 上运行没有并发的
优势，甚至可能比单线程执行更慢，因为线程间不断切换会带来额外开销。&lt;/p>
&lt;h3 id="正确认识-gil-的局限" >
&lt;div>
&lt;a href="#%e6%ad%a3%e7%a1%ae%e8%ae%a4%e8%af%86-gil-%e7%9a%84%e5%b1%80%e9%99%90">
##
&lt;/a>
正确认识 GIL 的局限:
&lt;/div>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>CPU 密集型任务：由于 GIL 的存在，Python 的多线程无法充分利用多核 CPU 的性能，对于 CPU 密
集型任务，使用多线程并不能有效提高性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I/O 密集型任务：对于 I/O 密集型任务（如文件读取、网络请求等），GIL 的影响较小，因为在
等待 I/O 操作完成时，GIL 可以释放，允许其他线程继续执行。因此，多线程仍然可以在 I/O 密
集型任务中提供显著的性能提升。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GIL 是 Python 解释器的全局锁，自动确保 Python 的内部数据结构（如引用计数）是线程安全的。
虽然提供了线程安全，但会影响多线程在 CPU 密集型任务中的表现。对于性能敏感的任务，可能
需要考虑其他实现（如多进程或使用不受 GIL 限制的库）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>好了，学海无涯，让我们荡起双桨:)&lt;/p>
&lt;p>后记：补一个三数取中法的实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">def&lt;/span> &lt;span style="color:#57c7ff">median_of_three&lt;/span>(arr, low, high):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mid &lt;span style="color:#ff6ac1">=&lt;/span> (low &lt;span style="color:#ff6ac1">+&lt;/span> high) &lt;span style="color:#ff6ac1">//&lt;/span> &lt;span style="color:#ff9f43">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pivot_candidates &lt;span style="color:#ff6ac1">=&lt;/span> [arr[low], arr[mid], arr[high]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pivot_candidates&lt;span style="color:#ff6ac1">.&lt;/span>sort()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> pivot_candidates[&lt;span style="color:#ff9f43">1&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>三数取中法（Median-of-Three）：选择第一个元素、最后一个元素和中间元素中的中位数作
为枢轴，这样可以减少出现最坏情况的几率。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Depth First Search, 深度优先搜索。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>